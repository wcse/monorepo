// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: feed/feed.proto

package feed

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _feed_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PostRequest) Validate() error {
	if m == nil {
		return nil
	}

	if uri, err := url.Parse(m.GetAudioUrl()); err != nil {
		return PostRequestValidationError{
			field:  "AudioUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
	} else if !uri.IsAbs() {
		return PostRequestValidationError{
			field:  "AudioUrl",
			reason: "value must be absolute",
		}
	}

	// no validation rules for Caption

	// no validation rules for Transcript

	if _, ok := _PostRequest_Privacy_NotInLookup[m.GetPrivacy()]; ok {
		return PostRequestValidationError{
			field:  "Privacy",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := Privacy_name[int32(m.GetPrivacy())]; !ok {
		return PostRequestValidationError{
			field:  "Privacy",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// PostRequestValidationError is the validation error returned by
// PostRequest.Validate if the designated constraints aren't met.
type PostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostRequestValidationError) ErrorName() string { return "PostRequestValidationError" }

// Error satisfies the builtin error interface
func (e PostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostRequestValidationError{}

var _PostRequest_Privacy_NotInLookup = map[Privacy]struct{}{
	0: {},
}

// Validate checks the field values on PostReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PostReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FeedId

	return nil
}

// PostReplyValidationError is the validation error returned by
// PostReply.Validate if the designated constraints aren't met.
type PostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostReplyValidationError) ErrorName() string { return "PostReplyValidationError" }

// Error satisfies the builtin error interface
func (e PostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostReplyValidationError{}
