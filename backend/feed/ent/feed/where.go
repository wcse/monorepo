// Code generated by entc, DO NOT EDIT.

package feed

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/wcse/monorepo/backend/feed/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FeedID applies equality check predicate on the "feed_id" field. It's identical to FeedIDEQ.
func FeedID(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedID), v))
	})
}

// AudioURL applies equality check predicate on the "audio_url" field. It's identical to AudioURLEQ.
func AudioURL(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudioURL), v))
	})
}

// Caption applies equality check predicate on the "caption" field. It's identical to CaptionEQ.
func Caption(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCaption), v))
	})
}

// Transcript applies equality check predicate on the "transcript" field. It's identical to TranscriptEQ.
func Transcript(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscript), v))
	})
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// FeedIDEQ applies the EQ predicate on the "feed_id" field.
func FeedIDEQ(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeedID), v))
	})
}

// FeedIDNEQ applies the NEQ predicate on the "feed_id" field.
func FeedIDNEQ(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeedID), v))
	})
}

// FeedIDIn applies the In predicate on the "feed_id" field.
func FeedIDIn(vs ...uuid.UUID) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFeedID), v...))
	})
}

// FeedIDNotIn applies the NotIn predicate on the "feed_id" field.
func FeedIDNotIn(vs ...uuid.UUID) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFeedID), v...))
	})
}

// FeedIDGT applies the GT predicate on the "feed_id" field.
func FeedIDGT(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeedID), v))
	})
}

// FeedIDGTE applies the GTE predicate on the "feed_id" field.
func FeedIDGTE(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeedID), v))
	})
}

// FeedIDLT applies the LT predicate on the "feed_id" field.
func FeedIDLT(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeedID), v))
	})
}

// FeedIDLTE applies the LTE predicate on the "feed_id" field.
func FeedIDLTE(v uuid.UUID) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeedID), v))
	})
}

// AudioURLEQ applies the EQ predicate on the "audio_url" field.
func AudioURLEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudioURL), v))
	})
}

// AudioURLNEQ applies the NEQ predicate on the "audio_url" field.
func AudioURLNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAudioURL), v))
	})
}

// AudioURLIn applies the In predicate on the "audio_url" field.
func AudioURLIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAudioURL), v...))
	})
}

// AudioURLNotIn applies the NotIn predicate on the "audio_url" field.
func AudioURLNotIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAudioURL), v...))
	})
}

// AudioURLGT applies the GT predicate on the "audio_url" field.
func AudioURLGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAudioURL), v))
	})
}

// AudioURLGTE applies the GTE predicate on the "audio_url" field.
func AudioURLGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAudioURL), v))
	})
}

// AudioURLLT applies the LT predicate on the "audio_url" field.
func AudioURLLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAudioURL), v))
	})
}

// AudioURLLTE applies the LTE predicate on the "audio_url" field.
func AudioURLLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAudioURL), v))
	})
}

// AudioURLContains applies the Contains predicate on the "audio_url" field.
func AudioURLContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAudioURL), v))
	})
}

// AudioURLHasPrefix applies the HasPrefix predicate on the "audio_url" field.
func AudioURLHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAudioURL), v))
	})
}

// AudioURLHasSuffix applies the HasSuffix predicate on the "audio_url" field.
func AudioURLHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAudioURL), v))
	})
}

// AudioURLEqualFold applies the EqualFold predicate on the "audio_url" field.
func AudioURLEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAudioURL), v))
	})
}

// AudioURLContainsFold applies the ContainsFold predicate on the "audio_url" field.
func AudioURLContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAudioURL), v))
	})
}

// CaptionEQ applies the EQ predicate on the "caption" field.
func CaptionEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCaption), v))
	})
}

// CaptionNEQ applies the NEQ predicate on the "caption" field.
func CaptionNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCaption), v))
	})
}

// CaptionIn applies the In predicate on the "caption" field.
func CaptionIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCaption), v...))
	})
}

// CaptionNotIn applies the NotIn predicate on the "caption" field.
func CaptionNotIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCaption), v...))
	})
}

// CaptionGT applies the GT predicate on the "caption" field.
func CaptionGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCaption), v))
	})
}

// CaptionGTE applies the GTE predicate on the "caption" field.
func CaptionGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCaption), v))
	})
}

// CaptionLT applies the LT predicate on the "caption" field.
func CaptionLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCaption), v))
	})
}

// CaptionLTE applies the LTE predicate on the "caption" field.
func CaptionLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCaption), v))
	})
}

// CaptionContains applies the Contains predicate on the "caption" field.
func CaptionContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCaption), v))
	})
}

// CaptionHasPrefix applies the HasPrefix predicate on the "caption" field.
func CaptionHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCaption), v))
	})
}

// CaptionHasSuffix applies the HasSuffix predicate on the "caption" field.
func CaptionHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCaption), v))
	})
}

// CaptionIsNil applies the IsNil predicate on the "caption" field.
func CaptionIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCaption)))
	})
}

// CaptionNotNil applies the NotNil predicate on the "caption" field.
func CaptionNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCaption)))
	})
}

// CaptionEqualFold applies the EqualFold predicate on the "caption" field.
func CaptionEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCaption), v))
	})
}

// CaptionContainsFold applies the ContainsFold predicate on the "caption" field.
func CaptionContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCaption), v))
	})
}

// TranscriptEQ applies the EQ predicate on the "transcript" field.
func TranscriptEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTranscript), v))
	})
}

// TranscriptNEQ applies the NEQ predicate on the "transcript" field.
func TranscriptNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTranscript), v))
	})
}

// TranscriptIn applies the In predicate on the "transcript" field.
func TranscriptIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTranscript), v...))
	})
}

// TranscriptNotIn applies the NotIn predicate on the "transcript" field.
func TranscriptNotIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTranscript), v...))
	})
}

// TranscriptGT applies the GT predicate on the "transcript" field.
func TranscriptGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTranscript), v))
	})
}

// TranscriptGTE applies the GTE predicate on the "transcript" field.
func TranscriptGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTranscript), v))
	})
}

// TranscriptLT applies the LT predicate on the "transcript" field.
func TranscriptLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTranscript), v))
	})
}

// TranscriptLTE applies the LTE predicate on the "transcript" field.
func TranscriptLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTranscript), v))
	})
}

// TranscriptContains applies the Contains predicate on the "transcript" field.
func TranscriptContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTranscript), v))
	})
}

// TranscriptHasPrefix applies the HasPrefix predicate on the "transcript" field.
func TranscriptHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTranscript), v))
	})
}

// TranscriptHasSuffix applies the HasSuffix predicate on the "transcript" field.
func TranscriptHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTranscript), v))
	})
}

// TranscriptIsNil applies the IsNil predicate on the "transcript" field.
func TranscriptIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTranscript)))
	})
}

// TranscriptNotNil applies the NotNil predicate on the "transcript" field.
func TranscriptNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTranscript)))
	})
}

// TranscriptEqualFold applies the EqualFold predicate on the "transcript" field.
func TranscriptEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTranscript), v))
	})
}

// TranscriptContainsFold applies the ContainsFold predicate on the "transcript" field.
func TranscriptContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTranscript), v))
	})
}

// PrivacyEQ applies the EQ predicate on the "privacy" field.
func PrivacyEQ(v Privacy) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivacy), v))
	})
}

// PrivacyNEQ applies the NEQ predicate on the "privacy" field.
func PrivacyNEQ(v Privacy) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivacy), v))
	})
}

// PrivacyIn applies the In predicate on the "privacy" field.
func PrivacyIn(vs ...Privacy) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivacy), v...))
	})
}

// PrivacyNotIn applies the NotIn predicate on the "privacy" field.
func PrivacyNotIn(vs ...Privacy) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivacy), v...))
	})
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerID), v))
	})
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerID), v))
	})
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerID), v))
	})
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerID), v))
	})
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Feed {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Feed(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Feed) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Feed) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Feed) predicate.Feed {
	return predicate.Feed(func(s *sql.Selector) {
		p(s.Not())
	})
}
